const app = require('../server')
const MIDDLEWARE = require('./middleware')
const CONTROLLER = require('./actionController')
const ROUTES = require('./routes')

// middleware for user rights:
app.use(ROUTES.ROLE.USER, MIDDLEWARE.CHECK_ROLE, MIDDLEWARE.ROLE.IS_USER)
app.use(
    ROUTES.ROLE.MODERATOR,
    MIDDLEWARE.CHECK_ROLE,
    MIDDLEWARE.ROLE.IS_MODERATOR
)
//app.use(ROUTES.ROLE.ADMIN, MIDDLEWARE.CHECK_ROLE, MIDDLEWARE.ROLE.IS_ADMIN)

app.post(ROUTES.LOGOUT, CONTROLLER.LOGOUT)

app.get(ROUTES.ROOT, async (req, res) => {
    res.json(ROUTES)
})
app.get(ROUTES.USER_LEVEL, CONTROLLER.GET_USER_LEVEL)
app.get(ROUTES.USER_INFORMATION, CONTROLLER.GET_USER_INFORMATION)
app.get(ROUTES.RIOT_API_KEY, CONTROLLER.GET_RIOT_API_KEY)

app.post(
    ROUTES.RIOT_API_KEY,
    MIDDLEWARE.CHECK_RIOT_KEY,
    MIDDLEWARE.CREATE_DB_RIOT_KEY,
    CONTROLLER.SET_RIOT_KEY
)

app.post(
    ROUTES.SIGNUP,
    MIDDLEWARE.CHECK_USERNAME_AVAILABILITY,
    MIDDLEWARE.CHECK_EMAIL_AVAILABILITY,
    CONTROLLER.SIGNUP
)

app.post(ROUTES.LOGIN_TOKEN, CONTROLLER.TOKEN_AUTH)

app.post(ROUTES.LOGIN, MIDDLEWARE.CHECK_IF_USERNAME_EXISTS, CONTROLLER.LOGIN)
